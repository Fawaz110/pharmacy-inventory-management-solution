// <auto-generated />
using System;
using Core.PharmacyDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(PharmaDbContext))]
    [Migration("20231206120104_AddMedicineModuleTables")]
    partial class AddMedicineModuleTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.PharmacyEntities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("InventoryType")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Indecations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SideEffects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("Core.PharmacyEntities.MedicineInventory", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("inventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("MedicineId", "inventoryId");

                    b.HasIndex("inventoryId");

                    b.ToTable("MedicineInventories");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiptType")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("Core.PharmacyEntities.ReceiptReceiver", b =>
                {
                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.HasKey("ReceiverId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptReceiver");
                });

            modelBuilder.Entity("Core.PharmacyEntities.ReceiptSender", b =>
                {
                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("SenderId", "ReceiptId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptSenders");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Location", b =>
                {
                    b.HasOne("Core.PharmacyEntities.Inventory", "Inventory")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Core.PharmacyEntities.MedicineInventory", b =>
                {
                    b.HasOne("Core.PharmacyEntities.Medicine", "Medicine")
                        .WithMany("Inventories")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PharmacyEntities.Inventory", "Inventory")
                        .WithMany("MedicinesInventory")
                        .HasForeignKey("inventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("Core.PharmacyEntities.ReceiptReceiver", b =>
                {
                    b.HasOne("Core.PharmacyEntities.Receipt", "Receipt")
                        .WithMany("ReceiptReceiver")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PharmacyEntities.Inventory", "Receiver")
                        .WithMany("ReceiptReceiver")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Core.PharmacyEntities.ReceiptSender", b =>
                {
                    b.HasOne("Core.PharmacyEntities.Receipt", "Receipt")
                        .WithMany("ReceiptSender")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.PharmacyEntities.Inventory", "Sender")
                        .WithMany("ReceiptSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Inventory", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("MedicinesInventory");

                    b.Navigation("ReceiptReceiver");

                    b.Navigation("ReceiptSenders");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Medicine", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Core.PharmacyEntities.Receipt", b =>
                {
                    b.Navigation("ReceiptReceiver");

                    b.Navigation("ReceiptSender");
                });
#pragma warning restore 612, 618
        }
    }
}
